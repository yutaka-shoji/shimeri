{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"shimeri","text":"<p>A Python package for calculating psychrometric properties of moist air and plotting psychrometric charts based on plotly.</p> <p>shimeri means \"moisture\" or \"humidity\" in Japanese.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install shimeri\n</code></pre>"},{"location":"#quick-usage","title":"Quick Usage","text":"<p>Usage example below.</p> sample.py<pre><code>import shimeri as sh\nimport numpy as np\nimport plotly.graph_objects as go\nimport pandas as pd\n\nif __name__ == \"__main__\":\n    # instantiate psychrometric calculator\n    pc = sh.PsychrometricCalculator()\n\n    # calculate psychrometric properties at 25degC dry-bulb temperature and 50% relative humidity\n    db, wb, rh, hr, en = pc.get_all(db=25, rh=50)\n    print(\n        f\"DB={db:.1f}degC, WB={wb:.1f}degC, RH={rh:.1f}%, HR={hr:.1f}g/kg, EN={en:.1f}kJ/kg\"\n    )\n\n    # initialize a psychrometric chart\n    fig = sh.PsychrometricChart()\n\n    # plot random points\n    rng = np.random.default_rng()\n    dbs = rng.normal(25, 5, 30)\n    rhs = rng.normal(50, 5, 30)\n    dbs, wbs, rhs, hrs, ens = pc.get_all(db=dbs, rh=rhs)\n    fig.add_points(\n        en=ens,\n        hr=hrs,\n        name=\"random points\",\n        mode=\"markers\",\n    )\n\n    # density plot\n    df = pd.read_csv(\"db_rh_tokyo_2023.csv\", parse_dates=True, index_col=0)\n    dbs = df.loc[\"2023-07\":\"2023-08\", \"db\"].to_numpy()\n    rhs = df.loc[\"2023-07\":\"2023-08\", \"rh\"].to_numpy()\n    # hrs = pc.get_hr_from_db_rh(dbs, rhs)\n    # ens = pc.get_en_from_db_hr(dbs, hrs)\n    dbs, wbs, rhs, hrs, ens = pc.get_all(db=dbs, rh=rhs)\n    fig.add_trace(\n        go.Histogram2dContour(\n            x=dbs,\n            y=hrs,\n            name=\"tokyo summer 2023\",\n            colorscale=[[0, \"rgba(255,255,255,0)\"], [1, \"rgba(255,0,0,255)\"]],\n            contours_showlines=False,\n            showscale=False,\n        )\n    )\n    dbs = df.loc[\"2023-01\":\"2023-02\", \"db\"].to_numpy()\n    rhs = df.loc[\"2023-01\":\"2023-02\", \"rh\"].to_numpy()\n    hrs = pc.get_hr_from_db_rh(dbs, rhs)\n    ens = pc.get_en_from_db_hr(dbs, hrs)\n    fig.add_trace(\n        go.Histogram2dContour(\n            x=dbs,\n            y=hrs,\n            name=\"tokyo winter 2023\",\n            colorscale=[[0, \"rgba(255,255,255,0)\"], [1, \"rgba(0,0,255,255)\"]],\n            contours_showlines=False,\n            showscale=False,\n        )\n    )\n\n    # add a line from points\n    dbs = np.array([26.0, 35.0])\n    rhs = np.array([50.0, 60.0])\n    hrs = pc.get_hr_from_db_rh(dbs, rhs)\n    ens = pc.get_en_from_db_hr(dbs, hrs)\n    fig.add_points(\n        en=ens,\n        hr=hrs,\n        name=\"a line\",\n        mode=\"lines\",\n    )\n\n    # draw constant humidity ratio line from half-mixed point to rh=90%\n    hr_mixed = (hrs[0] + hrs[1]) * 0.5\n    db_mixed = (dbs[0] + dbs[1]) * 0.5\n\n    db_90, wb_90, rh_90, hr_90, en_90 = pc.get_all(hr=hr_mixed, rh=90)\n\n    fig.draw_iso_hr_line(\n        hr=hr_mixed,\n        db_range=np.array([db_mixed, db_90]),\n        mode=\"lines+markers\",\n    )\n\n    # draw a line of constant relative humidity\n    fig.draw_iso_rh_line(\n        rh=90,\n        db_range=np.array([db_90, 15.0]),\n        mode=\"lines\",\n    )\n\n    fig.show()\n</code></pre> <p>Sample Result: </p>"},{"location":"#attention","title":"Attention","text":"<p>The <code>PsychrometricCalculator.get_all()</code> method uses convergence calculations. Especially when calculating from wet-bulb temperature and enthalpy, convergence can be poor, potentially leading to inaccurate results. (The poor convergence can be understood from the fact that the slopes of wet-bulb temperature and enthalpy lines are similar on the psychrometric chart.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Shoji, Yutaka</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api/psychrometricchart/","title":"psychrometricchart","text":""},{"location":"api/psychrometricchart/#shimeri.psychrometricchart.PsychrometricChart","title":"<code>PsychrometricChart</code>","text":"<p>               Bases: <code>Figure</code></p> <p>A class to create and manipulate a psychrometric chart.</p> <p>The PsychrometricChart class extends the go.Figure class from the plotly.graph_objects module.</p> Source code in <code>shimeri/psychrometricchart.py</code> <pre><code>class PsychrometricChart(go.Figure):\n    \"\"\"\n    A class to create and manipulate a psychrometric chart.\n\n    The PsychrometricChart class extends the go.Figure class from the plotly.graph_objects module.\n    \"\"\"\n\n    def __init__(self, pressure: float = 101.325):\n        \"\"\"\n        Initialize the PsychrometricChart class.\n\n        Args:\n            pressure: Atmospheric pressure in kPa.\n        \"\"\"\n        super().__init__()\n\n        self._pressure = pressure\n        self._pc = PsychrometricCalculator(pressure)\n        self._slope = self._calc_skew_slope()\n\n        bg_lines_layout = {\n            \"mode\": \"lines\",\n            \"line\": {\"color\": \"#E0E0E0\", \"width\": 1},\n            \"name\": \"\",\n            \"showlegend\": False,\n            \"hoverinfo\": \"skip\",\n        }\n\n        # Draw iso RH lines\n        _ = [\n            self.draw_iso_rh_line(rh, **bg_lines_layout) for rh in np.arange(0, 101, 10)\n        ]\n        # Draw iso DB lines\n        _ = [\n            self.draw_iso_db_line(db, **bg_lines_layout)\n            for db in np.arange(-10, 71, 10)\n        ]\n        # Draw iso EN lines\n        _ = [\n            self.draw_iso_en_line(en, **bg_lines_layout)\n            for en in np.arange(-10, 161, 10)\n        ]\n\n        # Add iso RH lines annotations\n        self._add_iso_rh_annotation()\n        # Add iso EN lines annotations\n        self._add_iso_en_annotation()\n\n        # Set xtick labels as the dry-bulb temperature values\n        self._xtick_label_to_db()\n\n        self.update_layout(\n            template=\"plotly_white\",\n        )\n        self.update_xaxes(\n            title=\"Dry-Bulb Temperature (degC)\",\n            range=self._db_to_en_at_hr0([-10, 50]),\n            linecolor=\"black\",\n            linewidth=1.0,\n            mirror=True,\n            showgrid=False,\n            zeroline=False,\n        )\n        self.update_yaxes(\n            title=\"Humidity Ratio (g&lt;sub&gt;water&lt;/sub&gt;/kg&lt;sub&gt;air&lt;/sub&gt;)\",\n            range=[0, 30],\n            linecolor=\"black\",\n            linewidth=1.0,\n            mirror=True,\n            showgrid=True,\n            zeroline=False,\n            minor=dict(showgrid=True),\n        )\n\n    def add_points(\n        self,\n        en: Union[NDArray[np.float64], float],\n        hr: Union[NDArray[np.float64], float],\n        **kwargs,\n    ):\n        \"\"\"\n        Add points to the psychrometric chart.\n\n        Args:\n            en: Moist air enthalpy (kJ/kg). Can be a numpy array.\n            hr: Humidity Ratio (g/kg). Can be a numpy array.\n            **kwargs: Additional keyword arguments to be passed to plotly's go.Scatter.\n        \"\"\"\n        db, wb, rh, hr, en = self._pc.get_all(en=en, hr=hr)\n        customdata = np.vstack([db, wb, rh, hr, en]).T\n        x, y = self._skew_transform(np.atleast_1d(en), np.atleast_1d(hr))\n\n        # if \"mode\" is not specified, set it to \"markers\"\n        if \"mode\" not in kwargs:\n            kwargs[\"mode\"] = \"markers\"\n\n        self.add_trace(\n            go.Scatter(\n                x=x,\n                y=y,\n                customdata=customdata,\n                hovertemplate=(\n                    \"DB: %{customdata[0]:.1f}degC&lt;br&gt;\"\n                    + \"WB: %{customdata[1]:.1f}degC&lt;br&gt;\"\n                    + \"RH: %{customdata[2]:.1f}%&lt;br&gt;\"\n                    + \"HR: %{customdata[3]:.1f}g/kg&lt;br&gt;\"\n                    + \"EN: %{customdata[4]:.1f}kJ/kg\"\n                ),\n                **kwargs,\n            )\n        )\n\n    def draw_iso_rh_line(\n        self,\n        rh: float,\n        db_range: Union[list[float], NDArray[np.float64]] = [-10, 70],\n        **kwargs,\n    ):\n        \"\"\"\n        Draw a line of constant relative humidity on the psychrometric chart.\n\n        Args:\n            rh: Relative humidity (%) as a float.\n            db_range: Range of dry bulb temperatures (degC) for which to draw the line.\n            **kwargs: Additional keyword arguments to be passed to plotly's go.Scatter.\n        \"\"\"\n        dbs = np.linspace(db_range[0], db_range[-1], 100)\n        hrs = self._pc.get_hr_from_db_rh(dbs, rh)\n        ens = self._pc.get_en_from_db_hr(dbs, hrs)\n        x, y = self._skew_transform(ens, hrs)\n        if \"name\" not in kwargs:\n            kwargs[\"name\"] = f\"RH={rh:.0f}%\"\n        self._draw_line_from_xy(x, y, **kwargs)\n\n    def draw_iso_db_line(\n        self,\n        db: float,\n        rh_range: Union[list[float], NDArray[np.float64]] = [0, 100],\n        **kwargs,\n    ):\n        \"\"\"\n        Draw a line of constant dry-bulb temperature on the psychrometric chart.\n\n        Args:\n            db: Dry bulb temperature (degC) as a float.\n            rh_range: Range of relative humidities (%) for which to draw the line.\n            **kwargs: Additional keyword arguments to be passed to plotly's go.Scatter.\n        \"\"\"\n        rhs = np.linspace(rh_range[0], rh_range[-1], 100)\n        hrs = self._pc.get_hr_from_db_rh(db, rhs)\n        ens = self._pc.get_en_from_db_hr(db, hrs)\n        x, y = self._skew_transform(ens, hrs)\n        if \"name\" not in kwargs:\n            kwargs[\"name\"] = f\"DB={db:.0f}degC\"\n        self._draw_line_from_xy(x, y, **kwargs)\n\n    def draw_iso_hr_line(\n        self,\n        hr: float,\n        db_range: Union[list[float], NDArray[np.float64]] = [-10, 70],\n        **kwargs,\n    ):\n        \"\"\"\n        Draw a line of constant humidity ratio on the psychrometric chart.\n\n        Args:\n            hr: Humidity ratio (g/kg) as a float.\n            db_range: Range of dry bulb temperatures (degC) for which to draw the line.\n            **kwargs: Additional keyword arguments to be passed to plotly's go.Scatter.\n        \"\"\"\n        dbs = np.array(db_range)\n        hrs = np.ones_like(dbs) * hr\n        ens = self._pc.get_en_from_db_hr(dbs, hrs)\n        x, y = self._skew_transform(ens, hrs)\n        if \"name\" not in kwargs:\n            kwargs[\"name\"] = f\"HR={hr:.0f}g/kg\"\n        self._draw_line_from_xy(x, y, **kwargs)\n\n    def draw_iso_en_line(\n        self,\n        en: float,\n        db_range: Union[list[float], NDArray[np.float64]] = [-10, 70],\n        **kwargs,\n    ):\n        \"\"\"\n        Draw a line of constant specific enthalpy on the psychrometric chart.\n\n        Args:\n            en: Specific enthalpy (kJ/kg) as a float.\n            db_range: Range of dry bulb temperatures (degC) for which to draw the line.\n            **kwargs: Additional keyword arguments to be passed to plotly's go.Scatter.\n        \"\"\"\n        dbs = np.array(db_range)\n        hrs = self._pc.get_hr_from_db_en(dbs, en)\n        ens = np.ones_like(hrs) * en\n        x, y = self._skew_transform(ens, hrs)\n        if \"name\" not in kwargs:\n            kwargs[\"name\"] = f\"EN={en:.0f}kJ/kg\"\n        self._draw_line_from_xy(x, y, **kwargs)\n\n    def _add_iso_rh_annotation(self):\n        \"\"\"Add annotations to the iso RH lines.\"\"\"\n        db = 48.0\n        rhs = np.arange(10.0, 101.0, 10.0)\n        hrs = self._pc.get_hr_from_db_rh(db, rhs)\n        ens = self._pc.get_en_from_db_hr(db, hrs)\n        x, y = self._skew_transform(ens, hrs)\n        texts = np.array([f\"RH={rh:.0f}%\" for rh in rhs])\n        self._add_annotation_from_xy(x, y, texts)\n\n    def _add_iso_en_annotation(self):\n        \"\"\"Add annotations to the iso enthalpy lines.\"\"\"\n        ens = np.array([20.0, 40.0, 60.0, 80.0, 100.0])  # kJ.kg-1\n        hrs = np.array([8.0, 13.0, 18.0, 23.0, 28.0])  # g.kg-1\n        x, y = self._skew_transform(ens, hrs)\n        texts = np.array([f\"EN={en:.0f}kJ/kg&lt;sub&gt;air&lt;/sub&gt;\" for en in ens])\n        self._add_annotation_from_xy(x, y, texts)\n\n    def _draw_line_from_xy(\n        self,\n        x: NDArray,\n        y: NDArray,\n        **kwargs,\n    ):\n        \"\"\"Draw a line from x and y.\"\"\"\n        if \"mode\" not in kwargs:\n            kwargs[\"mode\"] = \"lines\"\n        if \"hoverinfo\" not in kwargs:\n            kwargs[\"hoverinfo\"] = \"skip\"\n        self.add_trace(\n            go.Scatter(\n                x=x,\n                y=y,\n                **kwargs,\n            )\n        )\n\n    def add_histogram_2d_contour(\n        self,\n        en: Union[NDArray[np.float64], float],\n        hr: Union[NDArray[np.float64], float],\n        **kwargs,\n    ):\n        \"\"\"\n        Add a 2D histogram contour to the psychrometric chart.\n\n        Args:\n            en: Moist air enthalpy (kJ/kg).\n            hr: Humidity Ratio (g/kg).\n            **kwargs: Additional keyword arguments to be passed to plotly's go.Histogram2dContour.\n        \"\"\"\n        x, y = self._skew_transform(np.atleast_1d(en), np.atleast_1d(hr))\n\n        self.add_trace(\n            go.Histogram2dContour(\n                x=x,\n                y=y,\n                **kwargs,\n            )\n        )\n        # add text annotation to the contour peak point\n        if \"name\" in kwargs:\n            name = kwargs[\"name\"]\n            x_gravity, y_gravity = np.mean(x), np.mean(y)\n            self.add_trace(\n                go.Scatter(\n                    x=[x_gravity],\n                    y=[y_gravity],\n                    mode=\"text\",\n                    text=[name],\n                    textfont=dict(size=8),\n                    showlegend=False,\n                    hoverinfo=\"skip\",\n                )\n            )\n\n    def _add_annotation_from_xy(self, x: NDArray, y: NDArray, text: NDArray):\n        \"\"\"Add annotations to the figure.\"\"\"\n        self.add_trace(\n            go.Scatter(\n                x=x,\n                y=y,\n                mode=\"text\",\n                text=text,\n                textposition=\"top center\",\n                textfont=dict(size=8, color=\"#BDBDBD\"),\n                showlegend=False,\n                hoverinfo=\"skip\",\n            )\n        )\n\n    def _xtick_label_to_db(self):\n        \"\"\"Set xtick labels as the dry-bulb temperature values.\"\"\"\n        dbs = np.arange(-10, 51, 10)\n        ens = self._db_to_en_at_hr0(dbs)\n        self.update_xaxes(tickvals=ens, ticktext=dbs)\n\n    def _skew_transform(\n        self, en: NDArray[np.float64], hr: NDArray[np.float64]\n    ) -&gt; tuple[NDArray[np.float64], NDArray[np.float64]]:\n        \"\"\"\n        Transform the moist air enthalpy and humidity ratio to skew coordinates.\n\n        Args:\n            en: Moist air enthalpy (kJ/kg).\n            hr: Humidity ratio (g/kg).\n\n        Returns:\n            A tuple of numpy arrays representing the x and y coordinates in the skew coordinate system.\n        \"\"\"\n        affine_skew_matrix = np.array(\n            [\n                [1.0, 1 / self._slope],\n                [0.0, 1.0],\n            ],\n        )\n        vector = np.array(\n            [\n                en,\n                hr,\n            ]\n        )\n        orthogonal_points = affine_skew_matrix @ vector\n        x = orthogonal_points[0, :]\n        y = orthogonal_points[1, :]\n        return x, y\n\n    def _calc_skew_slope(self) -&gt; float:\n        \"\"\"\n        Calculate the slope of the skew lines in the psychrometric chart.\n\n        This method uses fixed values for humidity ratio (30.0 g/kg) and dry bulb temperature (50.0 degC)\n        to calculate the slope of the skew lines in the psychrometric chart.\n\n        Returns:\n            The slope of the skew lines as a float.\n        \"\"\"\n        db = 50.0\n        hrs = np.array([0.0, 30.0])\n        ens = self._pc.get_en_from_db_hr(db, hrs)\n        slope = (hrs[1] - hrs[0]) / (ens[0] - ens[1])\n        return slope\n\n    def _db_to_en_at_hr0(self, db: ArrayLike):\n        \"\"\"Calculate enthalpy at HR=0.\"\"\"\n        return self._pc.get_en_from_db_hr(db, 0.0)\n</code></pre>"},{"location":"api/psychrometricchart/#shimeri.psychrometricchart.PsychrometricChart.__init__","title":"<code>__init__(pressure=101.325)</code>","text":"<p>Initialize the PsychrometricChart class.</p> <p>Parameters:</p> Name Type Description Default <code>pressure</code> <code>float</code> <p>Atmospheric pressure in kPa.</p> <code>101.325</code> Source code in <code>shimeri/psychrometricchart.py</code> <pre><code>def __init__(self, pressure: float = 101.325):\n    \"\"\"\n    Initialize the PsychrometricChart class.\n\n    Args:\n        pressure: Atmospheric pressure in kPa.\n    \"\"\"\n    super().__init__()\n\n    self._pressure = pressure\n    self._pc = PsychrometricCalculator(pressure)\n    self._slope = self._calc_skew_slope()\n\n    bg_lines_layout = {\n        \"mode\": \"lines\",\n        \"line\": {\"color\": \"#E0E0E0\", \"width\": 1},\n        \"name\": \"\",\n        \"showlegend\": False,\n        \"hoverinfo\": \"skip\",\n    }\n\n    # Draw iso RH lines\n    _ = [\n        self.draw_iso_rh_line(rh, **bg_lines_layout) for rh in np.arange(0, 101, 10)\n    ]\n    # Draw iso DB lines\n    _ = [\n        self.draw_iso_db_line(db, **bg_lines_layout)\n        for db in np.arange(-10, 71, 10)\n    ]\n    # Draw iso EN lines\n    _ = [\n        self.draw_iso_en_line(en, **bg_lines_layout)\n        for en in np.arange(-10, 161, 10)\n    ]\n\n    # Add iso RH lines annotations\n    self._add_iso_rh_annotation()\n    # Add iso EN lines annotations\n    self._add_iso_en_annotation()\n\n    # Set xtick labels as the dry-bulb temperature values\n    self._xtick_label_to_db()\n\n    self.update_layout(\n        template=\"plotly_white\",\n    )\n    self.update_xaxes(\n        title=\"Dry-Bulb Temperature (degC)\",\n        range=self._db_to_en_at_hr0([-10, 50]),\n        linecolor=\"black\",\n        linewidth=1.0,\n        mirror=True,\n        showgrid=False,\n        zeroline=False,\n    )\n    self.update_yaxes(\n        title=\"Humidity Ratio (g&lt;sub&gt;water&lt;/sub&gt;/kg&lt;sub&gt;air&lt;/sub&gt;)\",\n        range=[0, 30],\n        linecolor=\"black\",\n        linewidth=1.0,\n        mirror=True,\n        showgrid=True,\n        zeroline=False,\n        minor=dict(showgrid=True),\n    )\n</code></pre>"},{"location":"api/psychrometricchart/#shimeri.psychrometricchart.PsychrometricChart.add_histogram_2d_contour","title":"<code>add_histogram_2d_contour(en, hr, **kwargs)</code>","text":"<p>Add a 2D histogram contour to the psychrometric chart.</p> <p>Parameters:</p> Name Type Description Default <code>en</code> <code>Union[NDArray[float64], float]</code> <p>Moist air enthalpy (kJ/kg).</p> required <code>hr</code> <code>Union[NDArray[float64], float]</code> <p>Humidity Ratio (g/kg).</p> required <code>**kwargs</code> <p>Additional keyword arguments to be passed to plotly's go.Histogram2dContour.</p> <code>{}</code> Source code in <code>shimeri/psychrometricchart.py</code> <pre><code>def add_histogram_2d_contour(\n    self,\n    en: Union[NDArray[np.float64], float],\n    hr: Union[NDArray[np.float64], float],\n    **kwargs,\n):\n    \"\"\"\n    Add a 2D histogram contour to the psychrometric chart.\n\n    Args:\n        en: Moist air enthalpy (kJ/kg).\n        hr: Humidity Ratio (g/kg).\n        **kwargs: Additional keyword arguments to be passed to plotly's go.Histogram2dContour.\n    \"\"\"\n    x, y = self._skew_transform(np.atleast_1d(en), np.atleast_1d(hr))\n\n    self.add_trace(\n        go.Histogram2dContour(\n            x=x,\n            y=y,\n            **kwargs,\n        )\n    )\n    # add text annotation to the contour peak point\n    if \"name\" in kwargs:\n        name = kwargs[\"name\"]\n        x_gravity, y_gravity = np.mean(x), np.mean(y)\n        self.add_trace(\n            go.Scatter(\n                x=[x_gravity],\n                y=[y_gravity],\n                mode=\"text\",\n                text=[name],\n                textfont=dict(size=8),\n                showlegend=False,\n                hoverinfo=\"skip\",\n            )\n        )\n</code></pre>"},{"location":"api/psychrometricchart/#shimeri.psychrometricchart.PsychrometricChart.add_points","title":"<code>add_points(en, hr, **kwargs)</code>","text":"<p>Add points to the psychrometric chart.</p> <p>Parameters:</p> Name Type Description Default <code>en</code> <code>Union[NDArray[float64], float]</code> <p>Moist air enthalpy (kJ/kg). Can be a numpy array.</p> required <code>hr</code> <code>Union[NDArray[float64], float]</code> <p>Humidity Ratio (g/kg). Can be a numpy array.</p> required <code>**kwargs</code> <p>Additional keyword arguments to be passed to plotly's go.Scatter.</p> <code>{}</code> Source code in <code>shimeri/psychrometricchart.py</code> <pre><code>def add_points(\n    self,\n    en: Union[NDArray[np.float64], float],\n    hr: Union[NDArray[np.float64], float],\n    **kwargs,\n):\n    \"\"\"\n    Add points to the psychrometric chart.\n\n    Args:\n        en: Moist air enthalpy (kJ/kg). Can be a numpy array.\n        hr: Humidity Ratio (g/kg). Can be a numpy array.\n        **kwargs: Additional keyword arguments to be passed to plotly's go.Scatter.\n    \"\"\"\n    db, wb, rh, hr, en = self._pc.get_all(en=en, hr=hr)\n    customdata = np.vstack([db, wb, rh, hr, en]).T\n    x, y = self._skew_transform(np.atleast_1d(en), np.atleast_1d(hr))\n\n    # if \"mode\" is not specified, set it to \"markers\"\n    if \"mode\" not in kwargs:\n        kwargs[\"mode\"] = \"markers\"\n\n    self.add_trace(\n        go.Scatter(\n            x=x,\n            y=y,\n            customdata=customdata,\n            hovertemplate=(\n                \"DB: %{customdata[0]:.1f}degC&lt;br&gt;\"\n                + \"WB: %{customdata[1]:.1f}degC&lt;br&gt;\"\n                + \"RH: %{customdata[2]:.1f}%&lt;br&gt;\"\n                + \"HR: %{customdata[3]:.1f}g/kg&lt;br&gt;\"\n                + \"EN: %{customdata[4]:.1f}kJ/kg\"\n            ),\n            **kwargs,\n        )\n    )\n</code></pre>"},{"location":"api/psychrometricchart/#shimeri.psychrometricchart.PsychrometricChart.draw_iso_db_line","title":"<code>draw_iso_db_line(db, rh_range=[0, 100], **kwargs)</code>","text":"<p>Draw a line of constant dry-bulb temperature on the psychrometric chart.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>float</code> <p>Dry bulb temperature (degC) as a float.</p> required <code>rh_range</code> <code>Union[list[float], NDArray[float64]]</code> <p>Range of relative humidities (%) for which to draw the line.</p> <code>[0, 100]</code> <code>**kwargs</code> <p>Additional keyword arguments to be passed to plotly's go.Scatter.</p> <code>{}</code> Source code in <code>shimeri/psychrometricchart.py</code> <pre><code>def draw_iso_db_line(\n    self,\n    db: float,\n    rh_range: Union[list[float], NDArray[np.float64]] = [0, 100],\n    **kwargs,\n):\n    \"\"\"\n    Draw a line of constant dry-bulb temperature on the psychrometric chart.\n\n    Args:\n        db: Dry bulb temperature (degC) as a float.\n        rh_range: Range of relative humidities (%) for which to draw the line.\n        **kwargs: Additional keyword arguments to be passed to plotly's go.Scatter.\n    \"\"\"\n    rhs = np.linspace(rh_range[0], rh_range[-1], 100)\n    hrs = self._pc.get_hr_from_db_rh(db, rhs)\n    ens = self._pc.get_en_from_db_hr(db, hrs)\n    x, y = self._skew_transform(ens, hrs)\n    if \"name\" not in kwargs:\n        kwargs[\"name\"] = f\"DB={db:.0f}degC\"\n    self._draw_line_from_xy(x, y, **kwargs)\n</code></pre>"},{"location":"api/psychrometricchart/#shimeri.psychrometricchart.PsychrometricChart.draw_iso_en_line","title":"<code>draw_iso_en_line(en, db_range=[-10, 70], **kwargs)</code>","text":"<p>Draw a line of constant specific enthalpy on the psychrometric chart.</p> <p>Parameters:</p> Name Type Description Default <code>en</code> <code>float</code> <p>Specific enthalpy (kJ/kg) as a float.</p> required <code>db_range</code> <code>Union[list[float], NDArray[float64]]</code> <p>Range of dry bulb temperatures (degC) for which to draw the line.</p> <code>[-10, 70]</code> <code>**kwargs</code> <p>Additional keyword arguments to be passed to plotly's go.Scatter.</p> <code>{}</code> Source code in <code>shimeri/psychrometricchart.py</code> <pre><code>def draw_iso_en_line(\n    self,\n    en: float,\n    db_range: Union[list[float], NDArray[np.float64]] = [-10, 70],\n    **kwargs,\n):\n    \"\"\"\n    Draw a line of constant specific enthalpy on the psychrometric chart.\n\n    Args:\n        en: Specific enthalpy (kJ/kg) as a float.\n        db_range: Range of dry bulb temperatures (degC) for which to draw the line.\n        **kwargs: Additional keyword arguments to be passed to plotly's go.Scatter.\n    \"\"\"\n    dbs = np.array(db_range)\n    hrs = self._pc.get_hr_from_db_en(dbs, en)\n    ens = np.ones_like(hrs) * en\n    x, y = self._skew_transform(ens, hrs)\n    if \"name\" not in kwargs:\n        kwargs[\"name\"] = f\"EN={en:.0f}kJ/kg\"\n    self._draw_line_from_xy(x, y, **kwargs)\n</code></pre>"},{"location":"api/psychrometricchart/#shimeri.psychrometricchart.PsychrometricChart.draw_iso_hr_line","title":"<code>draw_iso_hr_line(hr, db_range=[-10, 70], **kwargs)</code>","text":"<p>Draw a line of constant humidity ratio on the psychrometric chart.</p> <p>Parameters:</p> Name Type Description Default <code>hr</code> <code>float</code> <p>Humidity ratio (g/kg) as a float.</p> required <code>db_range</code> <code>Union[list[float], NDArray[float64]]</code> <p>Range of dry bulb temperatures (degC) for which to draw the line.</p> <code>[-10, 70]</code> <code>**kwargs</code> <p>Additional keyword arguments to be passed to plotly's go.Scatter.</p> <code>{}</code> Source code in <code>shimeri/psychrometricchart.py</code> <pre><code>def draw_iso_hr_line(\n    self,\n    hr: float,\n    db_range: Union[list[float], NDArray[np.float64]] = [-10, 70],\n    **kwargs,\n):\n    \"\"\"\n    Draw a line of constant humidity ratio on the psychrometric chart.\n\n    Args:\n        hr: Humidity ratio (g/kg) as a float.\n        db_range: Range of dry bulb temperatures (degC) for which to draw the line.\n        **kwargs: Additional keyword arguments to be passed to plotly's go.Scatter.\n    \"\"\"\n    dbs = np.array(db_range)\n    hrs = np.ones_like(dbs) * hr\n    ens = self._pc.get_en_from_db_hr(dbs, hrs)\n    x, y = self._skew_transform(ens, hrs)\n    if \"name\" not in kwargs:\n        kwargs[\"name\"] = f\"HR={hr:.0f}g/kg\"\n    self._draw_line_from_xy(x, y, **kwargs)\n</code></pre>"},{"location":"api/psychrometricchart/#shimeri.psychrometricchart.PsychrometricChart.draw_iso_rh_line","title":"<code>draw_iso_rh_line(rh, db_range=[-10, 70], **kwargs)</code>","text":"<p>Draw a line of constant relative humidity on the psychrometric chart.</p> <p>Parameters:</p> Name Type Description Default <code>rh</code> <code>float</code> <p>Relative humidity (%) as a float.</p> required <code>db_range</code> <code>Union[list[float], NDArray[float64]]</code> <p>Range of dry bulb temperatures (degC) for which to draw the line.</p> <code>[-10, 70]</code> <code>**kwargs</code> <p>Additional keyword arguments to be passed to plotly's go.Scatter.</p> <code>{}</code> Source code in <code>shimeri/psychrometricchart.py</code> <pre><code>def draw_iso_rh_line(\n    self,\n    rh: float,\n    db_range: Union[list[float], NDArray[np.float64]] = [-10, 70],\n    **kwargs,\n):\n    \"\"\"\n    Draw a line of constant relative humidity on the psychrometric chart.\n\n    Args:\n        rh: Relative humidity (%) as a float.\n        db_range: Range of dry bulb temperatures (degC) for which to draw the line.\n        **kwargs: Additional keyword arguments to be passed to plotly's go.Scatter.\n    \"\"\"\n    dbs = np.linspace(db_range[0], db_range[-1], 100)\n    hrs = self._pc.get_hr_from_db_rh(dbs, rh)\n    ens = self._pc.get_en_from_db_hr(dbs, hrs)\n    x, y = self._skew_transform(ens, hrs)\n    if \"name\" not in kwargs:\n        kwargs[\"name\"] = f\"RH={rh:.0f}%\"\n    self._draw_line_from_xy(x, y, **kwargs)\n</code></pre>"},{"location":"api/psychrometrics/","title":"psychrometrics","text":""},{"location":"api/psychrometrics/#shimeri.psychrometrics.PsychrometricCalculator","title":"<code>PsychrometricCalculator</code>","text":"<p>Class to calculate psychrometric variables.</p> Source code in <code>shimeri/psychrometrics.py</code> <pre><code>class PsychrometricCalculator:\n    \"\"\"Class to calculate psychrometric variables.\"\"\"\n\n    def __init__(self, pressure: float = 101.325):\n        \"\"\"Initialize the Psychrometrics class.\n\n        Args:\n            pressure: Atmospheric pressure (kPa)\n        \"\"\"\n        self.pressure = pressure\n\n    def get_all(\n        self,\n        db: ArrayLike = np.nan,\n        wb: ArrayLike = np.nan,\n        rh: ArrayLike = np.nan,\n        hr: ArrayLike = np.nan,\n        en: ArrayLike = np.nan,\n    ) -&gt; tuple[\n        Union[NDArray[np.float64], float],\n        Union[NDArray[np.float64], float],\n        Union[NDArray[np.float64], float],\n        Union[NDArray[np.float64], float],\n        Union[NDArray[np.float64], float],\n    ]:\n        \"\"\"\n        Calculate all psychrometric variables given any two of them.\n\n        This function takes in any two of the five psychrometric variables (dry bulb temperature, wet bulb temperature,\n        relative humidity, humidty ratio, specific air enthalpy) and calculates the remaining three. The inputs are\n        broadcasted to have the same shape, and the calculation is performed element-wise.\n\n        Args:\n            db: Dry bulb temperature (degC).\n            wb: Wet bulb temperature (degC).\n            rh: Relative humidity (%).\n            hr: Humidty ratio in g/kg.\n            en: Specific air enthalpy in kJ/kg.\n\n        Returns:\n            A tuple of five numpy arrays or float, each representing one of the psychrometric variables. The arrays have the same shape as the broadcasted input arrays.\n\n        Raises:\n            ValueError: If the number of provided variables is not exactly two.\n            ConvergenceError: If the calculation does not converge for a particular set of inputs.\n        \"\"\"\n        # Check args number (2 vars of 5)\n        provided_args_number = sum(\n            np.isfinite(arg).any() for arg in [db, wb, rh, hr, en]\n        )\n        if provided_args_number != 2:\n            raise ValueError(\"Input 2 Variables of 5.\")\n\n        db, wb, rh, hr, en = np.broadcast_arrays(db, wb, rh, hr, en)\n        db = db.flatten()\n        wb = wb.flatten()\n        rh = rh.flatten()\n        hr = hr.flatten()\n        en = en.flatten()\n\n        for idx in range(db.size):\n            try:\n                db[idx], wb[idx], rh[idx], hr[idx], en[idx] = self._calc_single(\n                    db[idx], wb[idx], rh[idx], hr[idx], en[idx]\n                )\n            except (ValueError, ConvergenceError) as e:\n                warnings.warn(\n                    \"Calculation failed for input at \"\n                    + \"(db,wb,rh,hr,en)=\"\n                    + f\"({db[idx]:.1f},{wb[idx]:.1f},{rh[idx]:.1f},{hr[idx]:.1f},{en[idx]:.1f}): \"\n                    + f\"{str(e)}\"\n                )\n                db[idx] = np.nan\n                wb[idx] = np.nan\n                rh[idx] = np.nan\n                hr[idx] = np.nan\n                en[idx] = np.nan\n\n        if db.size == 1:\n            return db[0], wb[0], rh[0], hr[0], en[0]\n        return db, wb, rh, hr, en\n\n    def _calc_single(\n        self,\n        db: float,\n        wb: float,\n        rh: float,\n        hr: float,\n        en: float,\n        ps: float = np.nan,\n        ps_wb: float = np.nan,\n        pw: float = np.nan,\n    ) -&gt; tuple[float, float, float, float, float]:\n        \"\"\"\n        Calculate psychrometric variables for a single set of inputs.\n\n        Args:\n            db: Dry bulb temperature (degC).\n            wb: Wet bulb temperature (degC).\n            rh: Relative humidity (%).\n            hr: Humidity ratio (g/kg).\n            en: Specific air enthalpy (kJ/kg).\n            ps: Saturation pressure at dry bulb temperature (kPa).\n            ps_wb: Saturation pressure at wet bulb temperature (kPa).\n            pw: Partial pressure of water vapor (kPa).\n\n        Returns:\n            A tuple of calculated psychrometric variables: dry bulb temperature, wet bulb temperature,\n            relative humidity, humidity ratio, and specific air enthalpy.\n\n        Raises:\n            ConvergenceError: If the root finding algorithm fails to converge.\n            ValueError: If the calculated relative humidity is greater than 100% or the calculated\n            humidity ratio is less than 0 g/kg.\n        \"\"\"\n        input_arr = np.array([ps, ps_wb, pw, db, wb, rh, hr, en])\n        input_idxs = np.where(np.isfinite(input_arr))[0]\n        input_vals = input_arr[input_idxs]\n\n        # system of equations\n        f = self._make_eqs_function(input_idxs, input_vals)\n        # initial guess\n        x = np.array([3.0, 2.0, 2.0, 25.0, 20.0, 50.0, 10.0, 50.0])\n        tol = 1e-6\n        max_iter = 100\n\n        for _ in range(max_iter):\n            fx = f(x)\n            if np.linalg.norm(fx) &lt; tol:\n                break\n            J = self._jacobian(f, x)\n            delta_x = np.linalg.solve(J, -fx)\n            x += delta_x\n        else:\n            raise ConvergenceError(\"Convergence failed\")\n\n        result = np.round(x[3:], 2)\n        db = result[0]\n        wb = result[1]\n        rh = result[2]\n        hr = result[3]\n        en = result[4]\n\n        if rh &gt; 100:\n            raise ValueError(f\"RH={rh:.1f}&gt;100%\")\n\n        if hr &lt; 0:\n            raise ValueError(f\"HR={hr:.1f}&lt;0g.kg-1\")\n\n        return db, wb, rh, hr, en\n\n    def _jacobian(self, f: Callable, x: np.ndarray, eps: float = 1e-8) -&gt; np.ndarray:\n        \"\"\"\n        Calculate the Jacobian matrix of the function f at x using finite differences.\n        \"\"\"\n        n = x.size\n        J = np.zeros((n, n))\n        fx = f(x)\n        for i in range(n):\n            x_eps = np.copy(x)\n            x_eps[i] += eps\n            J[:, i] = (f(x_eps) - fx) / eps\n        return J\n\n    def _make_eqs_function(\n        self, input_idxs: NDArray[np.int32], input_vals: NDArray[np.float64]\n    ) -&gt; Callable:\n        def equation(x: NDArray[np.float64]):\n            ps = x[0]\n            ps_wb = x[1]\n            pw = x[2]\n            db = x[3]\n            wb = x[4]\n            rh = x[5]\n            hr = x[6]\n            en = x[7]\n\n            c = self._psychrometer_constant(wb)  # psychrometer constant\n\n            eqs = np.zeros(8)\n\n            eqs[0] = ps - get_saturation_pressure(db)  # saturation pressure eq\n            eqs[1] = ps_wb - get_saturation_pressure(wb)  # wb saturation pressure eq\n            eqs[2] = pw - ps_wb + c * self.pressure * (db - wb)  # Sprung eq\n            eqs[3] = rh - (100 * pw) / ps  # relative humidity eq\n            eqs[4] = hr * 1e-3 - ((MOL_WEIGHT_WATER / MOL_WEIGHT_AIR) * pw) / (\n                self.pressure - pw\n            )  # humidity ratio eq\n            eqs[5] = en - 1.006 * db - (1.86 * db + 2501) * hr * 1e-3  # enthalpy eq\n            eqs[6] = x[input_idxs[0]] - input_vals[0]  # input equal\n            eqs[7] = x[input_idxs[1]] - input_vals[1]  # input equal\n\n            return eqs\n\n        return equation\n\n    @staticmethod\n    def get_en_from_db_hr(db: ArrayLike, hr: ArrayLike) -&gt; NDArray[np.float64]:\n        \"\"\"\n        Calculate specific air enthalpy from dry bulb temperature and humidity ratio.\n\n        Args:\n            db: Dry bulb temperature (degC).\n            hr: Humidity ratio (g/kg).\n\n        Returns:\n            Specific air enthalpy (kJ/kg).\n        \"\"\"\n        # Broadcast the input arrays to the same shape\n        db, hr = np.broadcast_arrays(db, hr)\n        # Calculate specific air enthalpy for each pair of db and hr\n        return 1.006 * db + (1.86 * db + 2501) * hr * 1e-3\n\n    @staticmethod\n    def get_hr_from_db_en(db: ArrayLike, en: ArrayLike) -&gt; NDArray[np.float64]:\n        \"\"\"\n        Calculate humidity ratio from dry bulb temperature and specific air enthalpy.\n\n        Args:\n            db: Dry bulb temperature (degC).\n            en: Specific air enthalpy (kJ/kg).\n\n        Returns:\n            Humidity ratio (g/kg).\n        \"\"\"\n        # Broadcast the input arrays to the same shape\n        db, en = np.broadcast_arrays(db, en)\n        # Calculate humidity ratio for each pair of db and en\n        return (en - 1.006 * db) / (1.86 * db + 2501) * 1e3\n\n    def get_hr_from_db_rh(self, db: ArrayLike, rh: ArrayLike) -&gt; NDArray[np.float64]:\n        \"\"\"\n        Calculate humidity ratio from dry bulb temperature and relative humidity.\n\n        Args:\n            db: Dry bulb temperature (degC).\n            rh: Relative humidity (%).\n\n        Returns:\n            Humidity ratio (g/kg).\n        \"\"\"\n        # Broadcast the input arrays to the same shape\n        db, rh = np.broadcast_arrays(db, rh)\n        # Calculate saturation pressure\n        ps = get_saturation_pressure(db)\n        # Calculate partial pressure of water vapor\n        pw = rh * ps / 100\n        # Calculate humidity ratio\n        return self.get_hr_from_pw(pw)\n\n    def get_rh_from_db_hr(self, db: ArrayLike, hr: ArrayLike) -&gt; NDArray[np.float64]:\n        \"\"\"\n        Calculate relative humidity from dry bulb temperature and humidity ratio.\n\n        Args:\n            db: Dry bulb temperature (degC).\n            hr: Humidity ratio (g/kg).\n\n        Returns:\n            Relative humidity (%).\n        \"\"\"\n        # Broadcast the input arrays to the same shape\n        db, hr = np.broadcast_arrays(db, hr)\n        # Calculate saturation pressure\n        ps = get_saturation_pressure(db)\n        # Calculate partial pressure of water vapor\n        pw = (\n            self.pressure\n            * hr\n            * 1e-3\n            / ((MOL_WEIGHT_WATER / MOL_WEIGHT_AIR) + hr * 1e-3)\n        )\n        # Calculate relative humidity\n        return 100 * pw / ps\n\n    @staticmethod\n    def get_db_from_hr_en(hr: ArrayLike, en: ArrayLike) -&gt; NDArray[np.float64]:\n        \"\"\"\n        Calculate dry bulb temperature from humidity ratio and specific air enthalpy.\n\n        Args:\n            hr: Humidity ratio (g/kg).\n            en: Specific air enthalpy (kJ/kg).\n\n        Returns:\n            Dry bulb temperature (degC).\n        \"\"\"\n        # Broadcast the input arrays to the same shape\n        hr, en = np.broadcast_arrays(hr, en)\n        # Calculate dry bulb temperature\n        return (en - 2501 * hr * 1e-3) / (1.006 + 1.86 * hr * 1e-3)\n\n    def get_hr_from_db_wb(self, db: ArrayLike, wb: ArrayLike) -&gt; NDArray[np.float64]:\n        \"\"\"\n        Calculate humidity ratio from dry bulb temperature and wet bulb temperature.\n\n        Args:\n            db: Dry bulb temperature (degC).\n            wb: Wet bulb temperature (degC).\n\n        Returns:\n            Humidity ratio (g/kg).\n        \"\"\"\n        # Broadcast the input arrays to the same shape\n        db, wb = np.broadcast_arrays(db, wb)\n        # Calculate saturation pressure at wet bulb temperature\n        ps_wb = get_saturation_pressure(wb)\n        # Calculate psychrometer constant\n        c = self._psychrometer_constant(wb)\n        # Calculate partial pressure of water vapor\n        pw = ps_wb - c * self.pressure * (db - wb)\n        # Calculate humidity ratio\n        return self.get_hr_from_pw(pw)\n\n    def get_hr_from_pw(self, pw: ArrayLike) -&gt; NDArray[np.float64]:\n        \"\"\"\n        Calculate humidity ratio from partial pressure of water vapor.\n\n        Args:\n            pw: Partial pressure of water vapor (kPa).\n\n        Returns:\n            Humidity ratio (g/kg).\n        \"\"\"\n        pw = np.asarray(pw)\n        return (MOL_WEIGHT_WATER / MOL_WEIGHT_AIR) * pw / (self.pressure - pw) * 1e3\n\n    @staticmethod\n    def _psychrometer_constant(wb: ArrayLike) -&gt; NDArray[np.float64]:\n        \"\"\"Calculate the psychrometer constant.\"\"\"\n        return np.where(np.asarray(wb) &gt;= 0.01, 0.000662, 0.000583)\n</code></pre>"},{"location":"api/psychrometrics/#shimeri.psychrometrics.PsychrometricCalculator.__init__","title":"<code>__init__(pressure=101.325)</code>","text":"<p>Initialize the Psychrometrics class.</p> <p>Parameters:</p> Name Type Description Default <code>pressure</code> <code>float</code> <p>Atmospheric pressure (kPa)</p> <code>101.325</code> Source code in <code>shimeri/psychrometrics.py</code> <pre><code>def __init__(self, pressure: float = 101.325):\n    \"\"\"Initialize the Psychrometrics class.\n\n    Args:\n        pressure: Atmospheric pressure (kPa)\n    \"\"\"\n    self.pressure = pressure\n</code></pre>"},{"location":"api/psychrometrics/#shimeri.psychrometrics.PsychrometricCalculator.get_all","title":"<code>get_all(db=np.nan, wb=np.nan, rh=np.nan, hr=np.nan, en=np.nan)</code>","text":"<p>Calculate all psychrometric variables given any two of them.</p> <p>This function takes in any two of the five psychrometric variables (dry bulb temperature, wet bulb temperature, relative humidity, humidty ratio, specific air enthalpy) and calculates the remaining three. The inputs are broadcasted to have the same shape, and the calculation is performed element-wise.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>ArrayLike</code> <p>Dry bulb temperature (degC).</p> <code>nan</code> <code>wb</code> <code>ArrayLike</code> <p>Wet bulb temperature (degC).</p> <code>nan</code> <code>rh</code> <code>ArrayLike</code> <p>Relative humidity (%).</p> <code>nan</code> <code>hr</code> <code>ArrayLike</code> <p>Humidty ratio in g/kg.</p> <code>nan</code> <code>en</code> <code>ArrayLike</code> <p>Specific air enthalpy in kJ/kg.</p> <code>nan</code> <p>Returns:</p> Type Description <code>tuple[Union[NDArray[float64], float], Union[NDArray[float64], float], Union[NDArray[float64], float], Union[NDArray[float64], float], Union[NDArray[float64], float]]</code> <p>A tuple of five numpy arrays or float, each representing one of the psychrometric variables. The arrays have the same shape as the broadcasted input arrays.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the number of provided variables is not exactly two.</p> <code>ConvergenceError</code> <p>If the calculation does not converge for a particular set of inputs.</p> Source code in <code>shimeri/psychrometrics.py</code> <pre><code>def get_all(\n    self,\n    db: ArrayLike = np.nan,\n    wb: ArrayLike = np.nan,\n    rh: ArrayLike = np.nan,\n    hr: ArrayLike = np.nan,\n    en: ArrayLike = np.nan,\n) -&gt; tuple[\n    Union[NDArray[np.float64], float],\n    Union[NDArray[np.float64], float],\n    Union[NDArray[np.float64], float],\n    Union[NDArray[np.float64], float],\n    Union[NDArray[np.float64], float],\n]:\n    \"\"\"\n    Calculate all psychrometric variables given any two of them.\n\n    This function takes in any two of the five psychrometric variables (dry bulb temperature, wet bulb temperature,\n    relative humidity, humidty ratio, specific air enthalpy) and calculates the remaining three. The inputs are\n    broadcasted to have the same shape, and the calculation is performed element-wise.\n\n    Args:\n        db: Dry bulb temperature (degC).\n        wb: Wet bulb temperature (degC).\n        rh: Relative humidity (%).\n        hr: Humidty ratio in g/kg.\n        en: Specific air enthalpy in kJ/kg.\n\n    Returns:\n        A tuple of five numpy arrays or float, each representing one of the psychrometric variables. The arrays have the same shape as the broadcasted input arrays.\n\n    Raises:\n        ValueError: If the number of provided variables is not exactly two.\n        ConvergenceError: If the calculation does not converge for a particular set of inputs.\n    \"\"\"\n    # Check args number (2 vars of 5)\n    provided_args_number = sum(\n        np.isfinite(arg).any() for arg in [db, wb, rh, hr, en]\n    )\n    if provided_args_number != 2:\n        raise ValueError(\"Input 2 Variables of 5.\")\n\n    db, wb, rh, hr, en = np.broadcast_arrays(db, wb, rh, hr, en)\n    db = db.flatten()\n    wb = wb.flatten()\n    rh = rh.flatten()\n    hr = hr.flatten()\n    en = en.flatten()\n\n    for idx in range(db.size):\n        try:\n            db[idx], wb[idx], rh[idx], hr[idx], en[idx] = self._calc_single(\n                db[idx], wb[idx], rh[idx], hr[idx], en[idx]\n            )\n        except (ValueError, ConvergenceError) as e:\n            warnings.warn(\n                \"Calculation failed for input at \"\n                + \"(db,wb,rh,hr,en)=\"\n                + f\"({db[idx]:.1f},{wb[idx]:.1f},{rh[idx]:.1f},{hr[idx]:.1f},{en[idx]:.1f}): \"\n                + f\"{str(e)}\"\n            )\n            db[idx] = np.nan\n            wb[idx] = np.nan\n            rh[idx] = np.nan\n            hr[idx] = np.nan\n            en[idx] = np.nan\n\n    if db.size == 1:\n        return db[0], wb[0], rh[0], hr[0], en[0]\n    return db, wb, rh, hr, en\n</code></pre>"},{"location":"api/psychrometrics/#shimeri.psychrometrics.PsychrometricCalculator.get_db_from_hr_en","title":"<code>get_db_from_hr_en(hr, en)</code>  <code>staticmethod</code>","text":"<p>Calculate dry bulb temperature from humidity ratio and specific air enthalpy.</p> <p>Parameters:</p> Name Type Description Default <code>hr</code> <code>ArrayLike</code> <p>Humidity ratio (g/kg).</p> required <code>en</code> <code>ArrayLike</code> <p>Specific air enthalpy (kJ/kg).</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>Dry bulb temperature (degC).</p> Source code in <code>shimeri/psychrometrics.py</code> <pre><code>@staticmethod\ndef get_db_from_hr_en(hr: ArrayLike, en: ArrayLike) -&gt; NDArray[np.float64]:\n    \"\"\"\n    Calculate dry bulb temperature from humidity ratio and specific air enthalpy.\n\n    Args:\n        hr: Humidity ratio (g/kg).\n        en: Specific air enthalpy (kJ/kg).\n\n    Returns:\n        Dry bulb temperature (degC).\n    \"\"\"\n    # Broadcast the input arrays to the same shape\n    hr, en = np.broadcast_arrays(hr, en)\n    # Calculate dry bulb temperature\n    return (en - 2501 * hr * 1e-3) / (1.006 + 1.86 * hr * 1e-3)\n</code></pre>"},{"location":"api/psychrometrics/#shimeri.psychrometrics.PsychrometricCalculator.get_en_from_db_hr","title":"<code>get_en_from_db_hr(db, hr)</code>  <code>staticmethod</code>","text":"<p>Calculate specific air enthalpy from dry bulb temperature and humidity ratio.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>ArrayLike</code> <p>Dry bulb temperature (degC).</p> required <code>hr</code> <code>ArrayLike</code> <p>Humidity ratio (g/kg).</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>Specific air enthalpy (kJ/kg).</p> Source code in <code>shimeri/psychrometrics.py</code> <pre><code>@staticmethod\ndef get_en_from_db_hr(db: ArrayLike, hr: ArrayLike) -&gt; NDArray[np.float64]:\n    \"\"\"\n    Calculate specific air enthalpy from dry bulb temperature and humidity ratio.\n\n    Args:\n        db: Dry bulb temperature (degC).\n        hr: Humidity ratio (g/kg).\n\n    Returns:\n        Specific air enthalpy (kJ/kg).\n    \"\"\"\n    # Broadcast the input arrays to the same shape\n    db, hr = np.broadcast_arrays(db, hr)\n    # Calculate specific air enthalpy for each pair of db and hr\n    return 1.006 * db + (1.86 * db + 2501) * hr * 1e-3\n</code></pre>"},{"location":"api/psychrometrics/#shimeri.psychrometrics.PsychrometricCalculator.get_hr_from_db_en","title":"<code>get_hr_from_db_en(db, en)</code>  <code>staticmethod</code>","text":"<p>Calculate humidity ratio from dry bulb temperature and specific air enthalpy.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>ArrayLike</code> <p>Dry bulb temperature (degC).</p> required <code>en</code> <code>ArrayLike</code> <p>Specific air enthalpy (kJ/kg).</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>Humidity ratio (g/kg).</p> Source code in <code>shimeri/psychrometrics.py</code> <pre><code>@staticmethod\ndef get_hr_from_db_en(db: ArrayLike, en: ArrayLike) -&gt; NDArray[np.float64]:\n    \"\"\"\n    Calculate humidity ratio from dry bulb temperature and specific air enthalpy.\n\n    Args:\n        db: Dry bulb temperature (degC).\n        en: Specific air enthalpy (kJ/kg).\n\n    Returns:\n        Humidity ratio (g/kg).\n    \"\"\"\n    # Broadcast the input arrays to the same shape\n    db, en = np.broadcast_arrays(db, en)\n    # Calculate humidity ratio for each pair of db and en\n    return (en - 1.006 * db) / (1.86 * db + 2501) * 1e3\n</code></pre>"},{"location":"api/psychrometrics/#shimeri.psychrometrics.PsychrometricCalculator.get_hr_from_db_rh","title":"<code>get_hr_from_db_rh(db, rh)</code>","text":"<p>Calculate humidity ratio from dry bulb temperature and relative humidity.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>ArrayLike</code> <p>Dry bulb temperature (degC).</p> required <code>rh</code> <code>ArrayLike</code> <p>Relative humidity (%).</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>Humidity ratio (g/kg).</p> Source code in <code>shimeri/psychrometrics.py</code> <pre><code>def get_hr_from_db_rh(self, db: ArrayLike, rh: ArrayLike) -&gt; NDArray[np.float64]:\n    \"\"\"\n    Calculate humidity ratio from dry bulb temperature and relative humidity.\n\n    Args:\n        db: Dry bulb temperature (degC).\n        rh: Relative humidity (%).\n\n    Returns:\n        Humidity ratio (g/kg).\n    \"\"\"\n    # Broadcast the input arrays to the same shape\n    db, rh = np.broadcast_arrays(db, rh)\n    # Calculate saturation pressure\n    ps = get_saturation_pressure(db)\n    # Calculate partial pressure of water vapor\n    pw = rh * ps / 100\n    # Calculate humidity ratio\n    return self.get_hr_from_pw(pw)\n</code></pre>"},{"location":"api/psychrometrics/#shimeri.psychrometrics.PsychrometricCalculator.get_hr_from_db_wb","title":"<code>get_hr_from_db_wb(db, wb)</code>","text":"<p>Calculate humidity ratio from dry bulb temperature and wet bulb temperature.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>ArrayLike</code> <p>Dry bulb temperature (degC).</p> required <code>wb</code> <code>ArrayLike</code> <p>Wet bulb temperature (degC).</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>Humidity ratio (g/kg).</p> Source code in <code>shimeri/psychrometrics.py</code> <pre><code>def get_hr_from_db_wb(self, db: ArrayLike, wb: ArrayLike) -&gt; NDArray[np.float64]:\n    \"\"\"\n    Calculate humidity ratio from dry bulb temperature and wet bulb temperature.\n\n    Args:\n        db: Dry bulb temperature (degC).\n        wb: Wet bulb temperature (degC).\n\n    Returns:\n        Humidity ratio (g/kg).\n    \"\"\"\n    # Broadcast the input arrays to the same shape\n    db, wb = np.broadcast_arrays(db, wb)\n    # Calculate saturation pressure at wet bulb temperature\n    ps_wb = get_saturation_pressure(wb)\n    # Calculate psychrometer constant\n    c = self._psychrometer_constant(wb)\n    # Calculate partial pressure of water vapor\n    pw = ps_wb - c * self.pressure * (db - wb)\n    # Calculate humidity ratio\n    return self.get_hr_from_pw(pw)\n</code></pre>"},{"location":"api/psychrometrics/#shimeri.psychrometrics.PsychrometricCalculator.get_hr_from_pw","title":"<code>get_hr_from_pw(pw)</code>","text":"<p>Calculate humidity ratio from partial pressure of water vapor.</p> <p>Parameters:</p> Name Type Description Default <code>pw</code> <code>ArrayLike</code> <p>Partial pressure of water vapor (kPa).</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>Humidity ratio (g/kg).</p> Source code in <code>shimeri/psychrometrics.py</code> <pre><code>def get_hr_from_pw(self, pw: ArrayLike) -&gt; NDArray[np.float64]:\n    \"\"\"\n    Calculate humidity ratio from partial pressure of water vapor.\n\n    Args:\n        pw: Partial pressure of water vapor (kPa).\n\n    Returns:\n        Humidity ratio (g/kg).\n    \"\"\"\n    pw = np.asarray(pw)\n    return (MOL_WEIGHT_WATER / MOL_WEIGHT_AIR) * pw / (self.pressure - pw) * 1e3\n</code></pre>"},{"location":"api/psychrometrics/#shimeri.psychrometrics.PsychrometricCalculator.get_rh_from_db_hr","title":"<code>get_rh_from_db_hr(db, hr)</code>","text":"<p>Calculate relative humidity from dry bulb temperature and humidity ratio.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>ArrayLike</code> <p>Dry bulb temperature (degC).</p> required <code>hr</code> <code>ArrayLike</code> <p>Humidity ratio (g/kg).</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>Relative humidity (%).</p> Source code in <code>shimeri/psychrometrics.py</code> <pre><code>def get_rh_from_db_hr(self, db: ArrayLike, hr: ArrayLike) -&gt; NDArray[np.float64]:\n    \"\"\"\n    Calculate relative humidity from dry bulb temperature and humidity ratio.\n\n    Args:\n        db: Dry bulb temperature (degC).\n        hr: Humidity ratio (g/kg).\n\n    Returns:\n        Relative humidity (%).\n    \"\"\"\n    # Broadcast the input arrays to the same shape\n    db, hr = np.broadcast_arrays(db, hr)\n    # Calculate saturation pressure\n    ps = get_saturation_pressure(db)\n    # Calculate partial pressure of water vapor\n    pw = (\n        self.pressure\n        * hr\n        * 1e-3\n        / ((MOL_WEIGHT_WATER / MOL_WEIGHT_AIR) + hr * 1e-3)\n    )\n    # Calculate relative humidity\n    return 100 * pw / ps\n</code></pre>"},{"location":"api/psychrometrics/#shimeri.psychrometrics.get_saturation_pressure","title":"<code>get_saturation_pressure(temp)</code>","text":"<p>Calculate saturation pressure (Hyland and Wexler, 1983).</p> <p>Parameters:</p> Name Type Description Default <code>temp</code> <code>ArrayLike</code> <p>Temperature (degC).</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>Saturation pressure (kPa)</p> Source code in <code>shimeri/psychrometrics.py</code> <pre><code>def get_saturation_pressure(temp: ArrayLike) -&gt; NDArray[np.float64]:\n    \"\"\"\n    Calculate saturation pressure (Hyland and Wexler, 1983).\n\n    Args:\n        temp: Temperature (degC).\n\n    Returns:\n        Saturation pressure (kPa)\n    \"\"\"\n    temp_in_kelvine = np.asarray(temp) + 273.15\n    result = np.empty_like(temp_in_kelvine)\n\n    # Calculate for temperatures above 0.01\n    mask = temp_in_kelvine &gt; 0.01\n    result[mask] = (\n        1e-3\n        * np.exp(\n            -(0.58002206 * 1e4) / temp_in_kelvine[mask]\n            + (0.13914993 * 1e1)\n            - (0.48640239 * 1e-1) * temp_in_kelvine[mask]\n            + (0.41764768 * 1e-4) * temp_in_kelvine[mask] ** 2\n            - (0.14452093 * 1e-7) * temp_in_kelvine[mask] ** 3\n        )\n        * temp_in_kelvine[mask] ** 6.5459673\n    )\n\n    # Calculate for temperatures below or equal to 0.01\n    mask = ~mask\n    result[mask] = (\n        1e-3\n        * np.exp(\n            -(0.56745359 * 1e4) / temp_in_kelvine[mask]\n            + (0.63925247 * 1e1)\n            - (0.96778430 * 1e-2) * temp_in_kelvine[mask]\n            + (0.62215701 * 1e-6) * temp_in_kelvine[mask] ** 2\n            + (0.20747825 * 1e-8) * temp_in_kelvine[mask] ** 3\n            - (0.94840240 * 1e-12) * temp_in_kelvine[mask] ** 4\n        )\n        * temp_in_kelvine[mask] ** 4.1635019\n    )\n\n    return result\n</code></pre>"}]}